name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  lint:
    runs-on: windows-latest  # Use Windows runner for linting

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run Lint
        run: .\gradlew lintDebug  # Use Windows-style command

      - name: Upload lint report
        uses: actions/upload-artifact@v3
        with:
          name: lint.html
          path: app\build\reports\lint-results-debug.html  # Windows-style path

  unit-test:
    needs: [lint]  # This makes the 'unit-test' job depend on the 'lint' job
    runs-on: windows-latest  # Use Windows runner for unit tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run unit tests
        run: .\gradlew testDebugUnitTest  # Run unit tests specifically on Windows

      - name: Upload test report
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: app\build\reports\tests\testDebugUnitTest\index.html  # Path to unit test report

  setup-and-run:
    needs: [unit-test]  # This job depends on the completion of the 'unit-test' job
    runs-on: macos-latest  # Use macOS runner for Android Emulator

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up the Android SDK
      - name: Set up Android SDK
        run: |
          # Set the ANDROID_SDK_ROOT environment variable
          echo "ANDROID_SDK_ROOT=/Users/runner/Library/Android/sdk" >> $GITHUB_ENV

          # Check if cmdline-tools folder exists, then rename it to 'latest'
          if [ -d "/Users/runner/Library/Android/sdk/cmdline-tools" ]; then
            mv /Users/runner/Library/Android/sdk/cmdline-tools /Users/runner/Library/Android/sdk/cmdline-tools/latest
          fi

          # Accept SDK licenses
          yes | /Users/runner/Library/Android/sdk/cmdline-tools/latest/bin/sdkmanager --licenses
          yes | /Users/runner/Library/Android/sdk/cmdline-tools/latest/bin/sdkmanager --update

      # Step 3: Install SDK Packages
      - name: Install SDK Packages
        run: |
          # Install platform-tools, emulator, and system images
          /Users/runner/Library/Android/sdk/cmdline-tools/latest/bin/sdkmanager "platform-tools" "emulator" "system-images;android-29;google_apis;x86_64"

      # Step 4: Start the Emulator
      - name: Start Emulator
        run: |
          # Create the AVD (Android Virtual Device) if it doesn't exist
          echo "no" | /Users/runner/Library/Android/sdk/tools/bin/avdmanager create avd -n testAVD -k "system-images;android-29;google_apis;x86_64" --force
          
          # Start the emulator in the background
          /Users/runner/Library/Android/sdk/emulator/emulator -avd testAVD -no-window -noaudio -no-boot-anim -gpu swiftshader_indirect &

          # Wait for the emulator to be ready
          adb -s emulator-5554 wait-for-device
          adb shell getprop sys.boot_completed

      # Step 5: Run Instrumentation Tests
      - name: Run Instrumentation Tests
        run: |
          # Run your Espresso tests or any instrumentation tests
          adb -s emulator-5554 shell am instrument -w com.example.test/androidx.test.runner.AndroidJUnitRunner

      # Step 6: Upload Test Report
      - name: Upload Test Report
        uses: actions/upload-artifact@v3
        with:
          name: instrumentation_test_report
          path: app/build/reports/androidTests/connected/index.html

      # Step 7: Optional - Clean up Emulator
      - name: Clean up Emulator
        run: |
          # Stop the emulator after the tests are complete
          adb -s emulator-5554 emu kill
