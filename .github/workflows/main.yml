name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
#  lint:
#    runs-on: windows-latest  # Use Windows runner for linting
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      - name: Run Lint
#        run: .\gradlew lintDebug  # Use Windows-style command
#
#      - name: Upload lint report
#        uses: actions/upload-artifact@v3
#        with:
#          name: lint.html
#          path: app\build\reports\lint-results-debug.html  # Windows-style path
#
#  unit-test:
#    needs: [lint]  # This makes the 'unit-test' job depend on the 'lint' job
#    runs-on: windows-latest  # Use Windows runner for unit tests
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      - name: Run unit tests
#        run: .\gradlew testDebugUnitTest  # Run unit tests specifically on Windows
#
#      - name: Upload test reportgradle -v
#        uses: actions/upload-artifact@v3
#        with:
#          name: test-report
#          path: app\build\reports\tests\testDebugUnitTest\index.html  # Path to unit test report



  instrumentation-test:
#    needs: [unit-test]  # If unit-test job exists and is needed
    runs-on: ubuntu-latest
    steps:
        - name: Checkout code
          uses: actions/checkout@v2

        # Set up JDK
        - name: Set up JDK 11
          uses: actions/setup-java@v3
          with:
            java-version: '11'
            distribution: 'temurin'

        # Set up Android SDK
        - name: Install Android SDK
          run: |
            sudo apt update
            sudo apt install -y unzip
            wget https://dl.google.com/android/repository/commandlinetools-linux-7302050_latest.zip -O /tmp/tools.zip
            unzip /tmp/tools.zip -d $HOME/android-sdk
            mkdir -p $HOME/android-sdk/cmdline-tools/latest  # Create the 'latest' folder
            mv $HOME/android-sdk/cmdline-tools/* $HOME/android-sdk/cmdline-tools/latest/  # Move the unzipped contents into 'latest'
            echo "y" | $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=$HOME/android-sdk --licenses
            $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=$HOME/android-sdk --update
            $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=$HOME/android-sdk --install "platform-tools" "build-tools;30.0.3" "platforms;android-34" "system-images;android-34;default;x86_64" "emulator"

        # Validate SDK Installation
        - name: Validate SDK Installation
          run: |
            $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=$HOME/android-sdk --list

        # Create and Start Emulator
        - name: Start Emulator
          run: |
            echo "no" | $HOME/android-sdk/cmdline-tools/latest/bin/avdmanager create avd -n testAVD -k "system-images;android-34;default;x86_64" --device "pixel"
            emulator -avd testAVD -no-window -no-audio -gpu off &
            # Wait for the emulator to boot up
            adb wait-for-device

        # Run Instrumentation Tests
        - name: Run Instrumentation Tests
          run: |
            ./gradlew connectedDebugAndroidTest --stacktrace

        # Stop Emulator
        - name: Stop Emulator
          run: |
            adb devices
            adb -s emulator-5554 emu kill
            adb kill-server